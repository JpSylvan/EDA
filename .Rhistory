training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(CompressiveStrength,data=training,colour=)
qplot(CompressiveStrength,data=training,colour=all)
qplot(CompressiveStrength,data=training,colour=.)
head(training)
qplot(CompressiveStrength,colour=Age,data=training)
inTrain
head(inTrain)
qplot(CompressiveStrength,colour=Age,data=mixtures)
head(mixtures)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
data=data.frame(training$IL_11,training$IL_13,training$IL_16,training$IL_17E,training$IL_1alpha,training$IL_3,training$IL_4,training$IL_5,training$IL_6,training$IL_6_Receptor,training$IL_7,training$IL_8)
data
head(data)
help(preProcess)
pca=preProcess(data,method="pca")
pca
pca=preProcess(data,method="pca",pcaComp=5)
pca
summary(pca)
pca$sdev
sdev(pca)
pca$rotation
summary(pca)
pca$std
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
pca2=prcomp(data=data)
pca2=prcomp(data)
summary(pca2)
data=data.frame(training$IL_11,training$IL_13,training$IL_16,training$IL_17E,training$IL_1alpha,training$IL_3,training$IL_4,training$IL_5,training$IL_6,training$IL_6_Receptor,training$IL_7,training$IL_8)
pca2=prcomp(data)
summary(pca2)
pca=preProcess(data,method="pca")
pca
summary(pca)
pca$std
sum(pca$std)
sort(pca$std)
help(sort)
sort(pca$std,decreasing=TRUE)
var_exp=sort(pca$std,decreasing=TRUE)/(sum(pca$std)
)
car_exp
var_exp
sum(var_exp[1:5])
sum(var_exp[1:6])
sum(var_exp[1:7])
sum(var_exp[1:8])
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
data=data.frame(training$IL_11,training$IL_13,training$IL_16,training$IL_17E,training$IL_1alpha,training$IL_3,training$IL_4,training$IL_5,training$IL_6,training$IL_6_Receptor,training$IL_7,training$IL_8)
data=data.frame(training$IL_11,training$IL_13,training$IL_16,training$IL_17E,training$IL_1alpha,training$IL_3,training$IL_4,training$IL_5,training$IL_6,training$IL_6_Receptor,training$IL_7,training$IL_8,training$diagnosis)
help(caret$predict)
help(predict)
help(caret.predict)
help(caret)
modelFit=train(data$diagnosis~.,method="glm",data=data)
modelFit=train(diagnosis~.,method="glm",data=data)
head(data)
dim(data)
length(data$diagnosis)
length(data$training.diagnosis)
modelFit=train(training.diagnosis~.,method="glm",data=data)
modelFit=train(data$training.diagnosis~.,method="glm",data=data)
install.packages('e1071', dependencies=TRUE)
modelFit=train(data$training.diagnosis~.,method="glm",data=data)
modelFit
modelFit
summary(modelFit)
confusionMatrix(testing$diagnosis,predict(modelFit))
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50, list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
size(adDate)
dim(adData)
dim(adData$diagnosis)
dim(adData[:,1])
dim(adData[,1])
dim(adData)
type(adData)
class(adData)
adData[1,1]
adData[1,:]
adData[1,]
adData[1,1]
adData[1,22]
adData[1,2]
name(adData)
names(adData)
adData$diagnosis
length(adData$diagnosis)
dim(adData$diagnosis)
dim(training)
dim(testing)
help(createDataPartition)
trainIndex = createDataPartition(diagnosis, p = 0.50, list=T)
training = adData[trainIndex,]
testing = adData[-trainIndex,]dim(training)
trainIndex = createDataPartition(diagnosis, p = 0.50, list=F)
training = adData[trainIndex,]
testing = adData[-trainIndex,]dim(training)
trainIndex = createDataPartition(diagnosis, p = 0.50, list=F)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
qplot(CompressiveStrength,data=training)
dim(training)
training$CompressiveStrength)
training$CompressiveStrength
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(CompressiveStrength,data=training)
library(ggplot)
library(ggplot2)
qplot(CompressiveStrength,data=training)
help(gplot)
help(qplot)
a=[1 2]
a=[1;2]
a=c(1,2)
a
type(a)
class(a)
is.integer(a)
is.numeric(a)
is.matrix(a)
is.vector(a)
b=1
is.vector(b)
plot(training$CompressiveStrength)
plot(CompressiveStrength,data=training)
a=factor(1,2)
a
class(a)
class(training$FlyAsh)
help(cut2)
library(Hmisc)
install.package("Hmisc")
install.packages("Hmisc")
library(Hmisc)
help(cut2)
hist(training$FlyAsh)
test=cut2(training$FlyAsh,g=2)
size(test)
dim(test)
test
plot(training$CompressiveStrength)
plot(training$CompressiveStrength,col=test)
dim(training)
class(training)
dim(training,2)
dim(training)[2]
help(source)
print(2)
for i in 1:dim(training)[2] {
print(class(training[,i]))
}
for (i in 1:dim(training)[2]) {
print(class(training[,i]))
}
training
training[,2]
class(training[,2])
vector()
class(2)
class(2.)
class(int(2)
)
class(as.integer(2))
class(integer(2))
class('2')
class(factor=(2))
factor(2)
class(factor(2))
2L
class(2L)
attributes(2)
a=2
attributes(a)
attributes(training)
nams(trainnig)
names(trainin)
names(training)
class(TRUE)
class(1)
class(logical(1))
logical(1)
logical(0)
logical(2)
as.logical(2)
as.logical(0)
class(1+1i)
m=matrix(1:10)
m
class(m)
attributes(m)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
source(ex3.r)
getwd()
source(ex3.r,local="D:Mes Documents/Coursera/Practical Machine Learning")
source(ex3.r,local="D:Mes Documents/Coursera/Practical Machine Learning/")
hist(training$SuperPlasticizer)
class(training$SuperPlasticizer)
dim(training)
names(training)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer)
)
sum(training$Superplasticizer<0)
sum(training$Superplasticizer=0)
sum(training$Superplasticizer==0)
log(0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
dim(training)
names(traiing)
names(training)
dim(training) #131 colonnes
names(training) #12 variables qui comment par IL
X = training[,58:69]
pca=preProcess(X,method="pca")
pca
summary(pca)
print(pca)
pca=preProcess(X,method="pca",thresh=0.85)
print(pca)
pca=preProcess(X,method="pca",thresh=0.9)
summary(pca)
print(pca)
dim(training) #131 colonnes
names(training) #12 variables qui comment par IL
X = data.frame(training[,58:69],training$diagnosis)
names(X)
X = data.frame(training[,58:69],diagnosis=training$diagnosis)
names(X)
train(diagnosis~.,data=X,method="glm")
modelFit=train(diagnosis~.,data=X,method="glm")
predict(modelFit,newdata=test)
predict(modelFit,newdata=testing)
testing$diagnosis
predict(modelFit,newdata=testing)==testing$diagnosis
mean(predict(modelFit,newdata=testing)==testing$diagnosis)
preProc=preProcess(X,method="pca",thresh=80)
preProc=preProcess(X[,-1],method="pca",thresh=80)
a=matrix(1:4,nrow=2)
a
a[,1]
a[,-1]
names(X)
tail(X)
preProc=preProcess(X[,-13],method="pca",thresh=80)
confusionMatrix(testing$diagnosis,predict(modelFit,newdata=testing))
preProc
class(preProc)
dim(preProc)
print(preProc)
summary(preProc)
predict(preProc,training$diagnosis)
predict(preProc,X[,-13])
trainPC = predict(preProc,X[,-13])
modelFit = train(diagnosis~.,data=trainPC,method="glm")
modelFit = train(X$diagnosis~.,data=trainPC,method="glm")
confusionMatrix(testing$diagnosis,predict(modelFit,newdata=testing))
dim(testing)
testPC=predict(PreProc,newdata=testing[,58:69])
testPC=predict(preProc,newdata=testing[,58:69])
confusionMatrix(testing$diagnosis,predict(modelFit,newdata=testPC))
help(createDataPartition)
dim(segmentationOriginal)
dim(SegmentationOriginal)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
dim(SegmentationOriginal)
dim(segmentationOriginal)
names(segmentationOriginal)
inTrain = createDataPartition(y=segmentationOriginal$Case,p=0.5,list=F)
training = segmentationOriginal[inTrain,]
testing = segmentationOriginal[-inTrain,]
set.seed(125)
dim(training)
modFit = train(Case,data=training,method="rpart")
names(training)
names(training)=="Case"
which(names(training)=="Case")
which(names(training)=="CART")
which(names(training)=="Cart")
training$Case[1:10]
training$Case
training = segmentationOriginal[Case=='Train',]
training = segmentationOriginal[segmentationOriginal$Case=='Train',]
testing = segmentationOriginal[segmentationOriginal$Case=='Test',]
set.seed(125)
names(training)
which(training=="PS")
a
which(a==2)
training(2728)
training[2728]
a[2]
class(training)
attributes(training)
training$Cell[1:10]
names(training)
training$Case[1:5]
training$Class[1:5]
modFit = train(Class~.,data=training,method="rpart")
modFit
print(modFit$finalModel)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
help(fancyRpartPlot)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
summary(cars)
library(swirl)
swirl()
5+7
x=5+7
x<-5+7
x
y=x-3
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-z-1
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
1:20
pi:100
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vec<-c(0.5,55,-10,6)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char <- c("My", "name", "is")
my_char
paste(my_char,collapse = " ")
c(my_char, "Jp")
my_name<-c(my_char, "Jp")
my_nale
my_name
paste(my_name,collapse=" ")
paste("Hello","world!", sep = " ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z=rep(NA,1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x(c(3,5,7))
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
class(vect)
names(vec)
names(vect)
type(vect)
vect2 <- c(11,2,NA)
names(vect2)<- c("foo","bar","norf")
identical(vect,vect2)
vect("bar")
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:10
my_vector <- 1:20
my_vectir
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix<-matrix(1:20,nrow=4,ncol=5)
my_matrix<-matrix(data=1:20,nrow=4,ncol=5)
my_matrix2<-matrix(data=1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(data.frame)
class(my_data)
cnames <- c("patient", "age",
| "weight", "bp", "rating", "test")
cnames <- c("patient", "age","weight", "bp", "rating", "test")
colnames(my_data)<-cnames
my_data
cube <- function(x, n) {
x^3
}
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
seacrh()
search()
weekddays()
weekdays()
weekdays
weekdays(1)
y=rnorm(1000)
hist(y)
setwd("D:/Mes documents/Coursera/EDA")
x=read.table(file="household_power_consumption.txt",skip=66636,nrows=2881,sep=";")
names(x)=c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity",
"Sub_metering_1","Sub_metering_2","Sub_metering_3")
hist(x$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
png("plot1.png")
